{"ast":null,"code":"import { FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/material/card\";\nimport * as i3 from \"@angular/material/input\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/forms\";\nfunction AppComponent_mat_error_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Please enter a valid email address \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AppComponent_mat_error_24_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Email is \");\n    i0.ɵɵelementStart(2, \"strong\");\n    i0.ɵɵtext(3, \"required\");\n    i0.ɵɵelementEnd()();\n  }\n}\n// for input format control\nexport class MyErrorStateMatcher {\n  isErrorState(control, form) {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\nexport class AppComponent {\n  constructor() {\n    this.title = 'bmi-calculator';\n    this.weight = '';\n    this.emailFormControl = new FormControl('', [Validators.required, Validators.email]);\n    this.matcher = new MyErrorStateMatcher();\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 27,\n  vars: 4,\n  consts: [[1, \"container\"], [1, \"material-icons\"], [1, \"example-form\"], [1, \"example-full-width\"], [\"type\", \"email\", \"matInput\", \"\", \"placeholder\", \"Ex. pat@example.com\", 3, \"formControl\", \"errorStateMatcher\"], [4, \"ngIf\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"title\");\n      i0.ɵɵtext(1, \"BMI - Calculator\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"body\")(3, \"div\", 0)(4, \"mat-card\")(5, \"mat-card-title-group\")(6, \"mat-card-title\");\n      i0.ɵɵtext(7, \" BMI Calculator \");\n      i0.ɵɵelementStart(8, \"span\", 1);\n      i0.ɵɵtext(9, \"calculate\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"mat-card-subtitle\");\n      i0.ɵɵtext(11, \" BMI stands for Body Mass Index. It is a measure of body fat based on a person's weight and height. \");\n      i0.ɵɵelementStart(12, \"p\");\n      i0.ɵɵtext(13, \"KG / Height ^ 2 = BMI\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(14, \"mat-card-content\")(15, \"form\", 2)(16, \"form\", 2)(17, \"mat-form-field\", 3)(18, \"mat-label\");\n      i0.ɵɵtext(19, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(20, \"input\", 4);\n      i0.ɵɵelementStart(21, \"mat-hint\");\n      i0.ɵɵtext(22, \"Errors appear instantly!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(23, AppComponent_mat_error_23_Template, 2, 0, \"mat-error\", 5);\n      i0.ɵɵtemplate(24, AppComponent_mat_error_24_Template, 4, 0, \"mat-error\", 5);\n      i0.ɵɵelementEnd()()()()();\n      i0.ɵɵelementStart(25, \"mat-card\");\n      i0.ɵɵtext(26, \" heelo2 \");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(20);\n      i0.ɵɵproperty(\"formControl\", ctx.emailFormControl)(\"errorStateMatcher\", ctx.matcher);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.emailFormControl.hasError(\"email\") && !ctx.emailFormControl.hasError(\"required\"));\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.emailFormControl.hasError(\"required\"));\n    }\n  },\n  dependencies: [i1.NgIf, i2.MatCard, i2.MatCardContent, i2.MatCardSubtitle, i2.MatCardTitle, i2.MatCardTitleGroup, i3.MatInput, i4.MatFormField, i4.MatLabel, i4.MatHint, i4.MatError, i5.ɵNgNoValidate, i5.DefaultValueAccessor, i5.NgControlStatus, i5.NgControlStatusGroup, i5.NgForm],\n  styles: [\".container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n}\\n\\n.mat-mdc-card[_ngcontent-%COMP%] {\\n  width: 50%;\\n  margin: 1%;\\n  padding: 2%;\\n}\\n\\n.mat-mdc-card-title[_ngcontent-%COMP%], .mat-mdc-card-subtitle[_ngcontent-%COMP%] {\\n  margin: 5%;\\n}\\n\\n.mat-mdc-form-field[_ngcontent-%COMP%] {\\n  margin: 2%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksYUFBQTtFQUNBLG1CQUFBO0FBQ0o7O0FBQ0E7RUFDSSxVQUFBO0VBQ0EsVUFBQTtFQUNBLFdBQUE7QUFFSjs7QUFBQTtFQUNJLFVBQUE7QUFHSjs7QUFEQTtFQUNJLFVBQUE7QUFJSiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXJ7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcclxufVxyXG4ubWF0LW1kYy1jYXJke1xyXG4gICAgd2lkdGg6IDUwJTtcclxuICAgIG1hcmdpbjogMSU7XHJcbiAgICBwYWRkaW5nOiAyJTtcclxufVxyXG4ubWF0LW1kYy1jYXJkLXRpdGxlLCAubWF0LW1kYy1jYXJkLXN1YnRpdGxle1xyXG4gICAgbWFyZ2luOiA1JTtcclxufVxyXG4ubWF0LW1kYy1mb3JtLWZpZWxke1xyXG4gICAgbWFyZ2luOiAyJTtcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AACA,SAAQA,WAAW,EAA8BC,UAAU,QAA6B,gBAAgB;;;;;;;;;ICqB1FC,iCAAgG;IAC9FA,oDACF;IAAAA,iBAAY;;;;;IACZA,iCAAyD;IACvDA,0BAAS;IAAAA,8BAAQ;IAAAA,wBAAQ;IAAAA,iBAAS;;;ADtBlD;AACA,OAAM,MAAOC,mBAAmB;EAC9BC,YAAY,CAACC,OAA2B,EAAEC,IAAwC;IAChF,MAAMC,WAAW,GAAGD,IAAI,IAAIA,IAAI,CAACE,SAAS;IAC1C,OAAO,CAAC,EAAEH,OAAO,IAAIA,OAAO,CAACI,OAAO,KAAKJ,OAAO,CAACK,KAAK,IAAIL,OAAO,CAACM,OAAO,IAAIJ,WAAW,CAAC,CAAC;EAC5F;;AAQF,OAAM,MAAOK,YAAY;EALzBC;IAME,UAAK,GAAG,gBAAgB;IACxB,WAAM,GAAG,EAAE;IACX,qBAAgB,GAAG,IAAIb,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACa,QAAQ,EAAEb,UAAU,CAACc,KAAK,CAAC,CAAC;IAE/E,YAAO,GAAG,IAAIZ,mBAAmB,EAAE;;;AALxBS,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAAI;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCjBzBlB,6BAAO;MAAAA,gCAAgB;MAAAA,iBAAQ;MAC/BA,4BAAM;MAKIA,gCACA;MAAAA,+BAA6B;MAAAA,yBAAS;MAAAA,iBAAO;MAE/CA,0CAAmB;MACjBA,qHACA;MAAAA,0BAAG;MAAAA,sCAAqB;MAAAA,iBAAI;MAGhCA,yCAAkB;MAICA,sBAAK;MAAAA,iBAAY;MAC5BA,4BACyC;MACzCA,iCAAU;MAAAA,yCAAwB;MAAAA,iBAAW;MAC7CA,2EAEY;MACZA,2EAEY;MACdA,iBAAiB;MAMzBA,iCAAU;MACRA,yBACF;MAAAA,iBAAW;;;MAjB4BA,gBAAgC;MAAhCA,kDAAgC;MAGjDA,eAAkF;MAAlFA,2GAAkF;MAGlFA,eAA2C;MAA3CA,gEAA2C","names":["FormControl","Validators","i0","MyErrorStateMatcher","isErrorState","control","form","isSubmitted","submitted","invalid","dirty","touched","AppComponent","constructor","required","email","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\user\\Desktop\\Code_Project\\Angular_Project\\BMI\\BMI_calculator\\bmi-calculator\\src\\app\\app.component.ts","C:\\Users\\user\\Desktop\\Code_Project\\Angular_Project\\BMI\\BMI_calculator\\bmi-calculator\\src\\app\\app.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm, Validators,ReactiveFormsModule  } from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\n\n// for input format control\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'bmi-calculator';\n  weight = '';\n  emailFormControl = new FormControl('', [Validators.required, Validators.email]);\n\n  matcher = new MyErrorStateMatcher();\n}\n","<title>BMI - Calculator</title>\n<body>\n  <div class=\"container\">\n    <mat-card>\n      <mat-card-title-group>\n        <mat-card-title>\n          BMI Calculator\n          <span class=\"material-icons\">calculate</span>\n        </mat-card-title>\n        <mat-card-subtitle>\n          BMI stands for Body Mass Index. It is a measure of body fat based on a person's weight and height.\n          <p>KG / Height ^ 2 = BMI</p>\n        </mat-card-subtitle>\n      </mat-card-title-group>\n      <mat-card-content>\n        <form class=\"example-form\">\n          <form class=\"example-form\">\n            <mat-form-field class=\"example-full-width\">\n              <mat-label>Email</mat-label>\n              <input type=\"email\" matInput [formControl]=\"emailFormControl\" [errorStateMatcher]=\"matcher\"\n                     placeholder=\"Ex. pat@example.com\">\n              <mat-hint>Errors appear instantly!</mat-hint>\n              <mat-error *ngIf=\"emailFormControl.hasError('email') && !emailFormControl.hasError('required')\">\n                Please enter a valid email address\n              </mat-error>\n              <mat-error *ngIf=\"emailFormControl.hasError('required')\">\n                Email is <strong>required</strong>\n              </mat-error>\n            </mat-form-field>\n          </form>\n          \n      </form>\n      </mat-card-content>\n    </mat-card>\n    <mat-card>\n      heelo2\n    </mat-card>\n  </div>\n</body>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}